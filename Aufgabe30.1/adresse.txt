#include <iostream>
using namespace std;

void log(const char* const s) { cout << "LOG " << s << endl; }

struct A
{
    int n;
    static int z;
    const char* s;
    A(const char* s) : s(s)
    {
        n = z++;
        log("A");
    }

    virtual ~A() { log("~A"); }

    void log(const char* const t) const { cout << n << s << t <<
                                                  endl; }
};

int A::z = 1;
struct B : A
{
    B(const char* s) : A(s) { log("B"); }
    ~B() { log("~B"); }

    void log(const char* const t) const
    {
        std::cout << "#";
        A::log(t);
    }
};

struct C : B
{
    C(const char* s) : B(s)
    {
        log("C");
    }
    ~C()
    {
        log("~C");
    }
};

int main()
{
    A a("a");
    B b("b");
    C c("c");
    log("ENDE");

}


#include <iostream>

struct A
{
    void f(const int& i) { log("A::f(const int&)"); }
    void f(int& i) { log("A::f(int&)"); }
    void f(const int& i) const { log("A::f(const int&) const"); }
    void f(int& i) const { log("A::f(int&) const"); }
    void log(const char* const s) const { std::cout << s << std::
                                                       endl; }
};

int main()
{
    A a1;
    const A a2;
    int i1=0;
    const int i2=0;
    a1.f(i1);
    a2.f(i1);
    a1.f(i2);
    a2.f(i2);
}

#include <iostream>

struct Basis {
    void f() { std::cout << "Basis\n"; }
};

struct Kind : Basis {
    void f() { std::cout << "Kind\n";}
};

struct Lady: Kind{
    virtual void f() { std::cout << "Lady\n"; }
};

struct Enkel : Lady {
    void f() { std::cout << "Enkel\n"; }
};

int main() {
    Kind kind;
    Enkel enkel;
    Lady lady;

    Kind& k1 = kind;
    Kind& k2 = enkel;
    Kind& k3 = lady;
    k1.f();
    k2.f();
    k3.f();
    Lady& e1 = enkel;
    Lady& e2 = lady;
    e1.f();
    e2.f();
}

#include <iostream>
using namespace std;
struct Basis {
    Basis() {
        cout << "\nBasis() " << (i=++c);
    }
    Basis(const Basis& b) {
        cout << "\nBasis(const Basis&) " << b.i << " " << (i=++c);
    }
    Basis& operator=(const Basis& b) {
        cout << "\noperator=(const Basis&) " << b.i << " " << i;
        return *this;
    }
    ~Basis() { i=-1; }
    static int c;
    int i;
};

struct Kind : Basis {
    ~Kind() { cout << "\n~Kind() " << i; }
};

int Basis::c = 11;

int main()
{   Basis b1, b2;
    Basis b3 = b1;
    b2 = b1;
    Kind k1;
    Kind k2(k1);
}

#include <iostream>
struct K {
char c;
K(char c) : c(c) {}
K& operator-(const K& k) {
std::cout << c << "-" << k.c << "\n";
return *this;
}
K& operator=(const K& k) {
std::cout << c << "=" << k.c << "\n";
return *this;
}
};

int main() {
  K a('a'), b('b'), c('c');
  a = K('d');
  a = b = c;
  a - b - c;
}

#include <iostream>
#include <string>

struct S {
    std::string name;
    std::string text;
    S(std::string name) : name(name) {}
    S& operator=(const S& a) {
        text += "=";
        std::cout << name << "=" << a.name << ": " << text + "\n";
        return *this;
    }
    S& operator-(const S& a) {
        text += "-";
        std::cout << name << "-" << a.name << ": " + text + "\n";
        return *this;
    }
};

int main() {
    S a1("a"), b1("b"), c1("c");
    S a2("a"), b2("b"), c2("c");
    S a3("a"), b3("b"), c3("c");
    S a4("a"), b4("b"), c4("c");
    a1 - b1 - c1;
    a2 = b2 = c2;
    a3 - b3 = c3;
    a4 = b4 - c4;
}

#include <iostream>
#include <string>

struct S {
    S() { std::cout << "S"; }
    virtual std::string typ() const { return "S"; }
};

struct T : S {
    T() { std::cout << "T"; }
    virtual std::string typ() const { return "T"; }
};

void log(const char* s1, const std::string& s2) {
    std::cout << s1 << s2 << std::endl;
}

int main(){
    try{ throw T(); }
    catch(const T& e){ log("-T",e.typ()); }
    catch(const S& e){ log("-S",e.typ()); }

}


#include <iostream>
#include <string>
using namespace std;

struct A
{
    virtual void a() = 0;
};
class B : public A
{
public:
    B()
    {
        ausgabe("B()");
    }
    virtual ~B()
    {
        ausgabe("~B()");
    }
    static void ausgabe(const
                        string& text)
    {
        cout << "#" << z << ": "<< text << endl;
        z++;
    }
private:
    static int z;
};

int B::z = 0;

class C : public B
{
public:
    C()
    {
        ausgabe("C()");
    }
    virtual ~C()
    {
        ausgabe("~C()");
    }
    void a()
    {
        ausgabe("C::a()");
    }
    void c()
    {
        ausgabe("C::c()");
    }
};

class D : public C
{
public:
    D()
    {
        ausgabe("D()");
    }
    virtual ~D()
    {
        ausgabe("~D()");
    }
    void a()
    {
        ausgabe("D::a()");
    }
    void c()
    {
        ausgabe("D::c()");
    }
    void d()
    {
        ausgabe("D::d()");
        C::a();
    }
};

int main()
{
    B::ausgabe("START");
    A* za = new C();
    za->a();
    delete za;
    B* zb = new C();
    zb->a();
    delete zb;
    D d;
    A& ra = d;
    ra.a();
    C& rc = d;
    rc.a();
    rc.c();
    D& rd = d;
    rd.a();
    rd.c();
    rd.d();
    B::ausgabe("ENDE");
}

#include <iostream>
using namespace std;

struct A
{
    void a() {}
    virtual void a() const = 0;
};

struct B : public A
{
    B()
    {
        n = ++N;
        log("B::B()");
    }
    virtual ~B() { log("B::~B()"); }
    void log(const string& s) const { cout << s << ": " << n << "\n"
                                              ; }
    void a() { log("B::a()"); }
    void a() const { log("B::a() const"); }
    int n;
    static int N;
};

int B::N;
struct C : public B
{
    C() { log("C::C()"); }
    ~C() { log("C::~C()"); }
    void a() { log("C::a()"); }
    void a() const { log("C::a() const"); }
};

int main()
{
    A* a[2] = { new B(), new C()};
    for(A* e : a)
    {
        e->a();
    }
    for(const A* e : a)
    {
        e->a();
    }
    B* b[2] = { new B(), new C()
              };
    for(B* e : b)
    {
        e->a();
    }
    for(const B* e : b)
    {
        e->a();
    }
    for(A* e : a)
    {
        delete e;
    }
    for(B* e : b)
    {
        delete e;
    }
    C c;
    c.a();
    const C& r = c;
    r.a();
};

#include <iostream>
using namespace std;

struct D
{
    char c;
    D(char c) : c(c) {}
    D& operator+(const D& d)
    {
        std::cout << c << "+" << d.c << "\n";
        return *this;
    }
    D& operator=(const D& d)
    {
        std::cout << c << "=" << d.c << "\n";
        return *this;
    }
    D& operator=(const D&& d)
    {
        std::cout << c << ".operator=(" << d.c << ")\n";
        return *this;
    }
};

int main()
{
    D a('a'), b('b'), c('c');
    a = D('d');
    a + b + c;
    a = b = c;
}

#include <iostream>
using namespace std;

struct E
{
    E() {}
};

void f(const E& e) { cout << "f(const E&)\n"; }
void f(E& e) { cout << "f(E&)\n"; }

struct G
{
    G() {}
};

void f(G& e) { cout << "f(G&)\n"; }
void f(G&& e) { cout << "f(G&&)\n"; }
void f(const G& e) { cout << "f(const G&)\n"; }

int main()
{
    E e1;
    const E e2;
    G g1;
    const G g2;
    f(e1);
    f(e2);
    f(move(e1));
    f(E());
    f(g1);
    f(g2);
    f(move(g1));
    f(G());
}

#include <iostream>

void log(const char* const s)
{
    std::cout << s << std::endl;
}

struct A
{
    void f() { log("A::f"); }
};

struct B : A
{
    virtual void f() { log("B::f"); }
};

struct C : B
{
    void f() { log("C::f"); }
};

int main()
{
    A a;
    B b;
    C c;
    a.f();
    b.f();
    c.f();
    A* zaa = &a;
    A* zab = &b;
    A* zac = &c;
    zaa->f();
    zab->f();
    zac->f();
    B* zbb = &b;
    B* zbc = &c;
    zbb->f();
    zbc->f();
    C* zcc = &c;
    zcc->f();
}

#include <iostream>
using namespace std;

void log(const char* const s) { cout << "LOG " << s << endl; }
struct A
{
    int n;
    static int z;
    const char* s;

    A(const char* s) : s(s)
    {
        n = z++;
        log("A");
    }

    virtual ~A() { log("~A"); }

    void log(const char* const t) const { cout << n << s << t <<
                                                  endl; }
};

int A::z = 1;

struct B : A
{
    B(const char* s) : A(s) { log("B"); }
    ~B() { log("~B"); }

    void log(const char* const t) const
    {
        std::cout << "#";
        A::log(t);
    }
};

struct C : B
{
    C(const char* s) : B(s)
    {
        log("C");
    }
    ~C()
    {
        log("~C");
    }
};

int main()
{
    A a("a");
    B b("b");
    C c("c");
    log("ENDE");
}

#include <iostream>

struct A
{
    void f(const int& i) { log("A::f(const int&)"); }
    void f(int& i) { log("A::f(int&)"); }
    void f(const int& i) const { log("A::f(const int&) const"); }
    void f(int& i) const { log("A::f(int&) const"); }
    void log(const char* const s) const { std::cout << s << std::
                                                       endl; }
};

int main()
{
    A a1;
    const A a2;
    int i1=0;
    const int i2=0;
    a1.f(i1);
    a2.f(i1);
    a1.f(i2);
    a2.f(i2);
}
